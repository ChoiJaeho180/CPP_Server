// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class LobbyPlayerInfo;
struct LobbyPlayerInfoDefaultTypeInternal;
extern LobbyPlayerInfoDefaultTypeInternal _LobbyPlayerInfo_default_instance_;
class LocationYaw;
struct LocationYawDefaultTypeInternal;
extern LocationYawDefaultTypeInternal _LocationYaw_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::LobbyPlayerInfo* Arena::CreateMaybeMessage<::Protocol::LobbyPlayerInfo>(Arena*);
template<> ::Protocol::LocationYaw* Arena::CreateMaybeMessage<::Protocol::LocationYaw>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class LocationYaw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LocationYaw) */ {
 public:
  inline LocationYaw() : LocationYaw(nullptr) {}
  ~LocationYaw() override;
  explicit PROTOBUF_CONSTEXPR LocationYaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocationYaw(const LocationYaw& from);
  LocationYaw(LocationYaw&& from) noexcept
    : LocationYaw() {
    *this = ::std::move(from);
  }

  inline LocationYaw& operator=(const LocationYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationYaw& operator=(LocationYaw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocationYaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocationYaw* internal_default_instance() {
    return reinterpret_cast<const LocationYaw*>(
               &_LocationYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocationYaw& a, LocationYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationYaw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationYaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocationYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocationYaw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocationYaw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocationYaw& from) {
    LocationYaw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationYaw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LocationYaw";
  }
  protected:
  explicit LocationYaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kYawFieldNumber = 5,
    kMoveStateFieldNumber = 6,
    kDurationFieldNumber = 7,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float yaw = 5;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // .Protocol.MoveState moveState = 6;
  void clear_movestate();
  ::Protocol::MoveState movestate() const;
  void set_movestate(::Protocol::MoveState value);
  private:
  ::Protocol::MoveState _internal_movestate() const;
  void _internal_set_movestate(::Protocol::MoveState value);
  public:

  // float duration = 7;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LocationYaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    float x_;
    float y_;
    float yaw_;
    int movestate_;
    float duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInfo& from) {
    ObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kLocationYawFieldNumber = 3,
    kIdFieldNumber = 1,
    kObjectTypeFieldNumber = 2,
    kJobTypeFieldNumber = 5,
    kMonsterTypeFieldNumber = 6,
    kLevelFieldNumber = 7,
    kMapCmsIdFieldNumber = 8,
    kHpFieldNumber = 9,
    kExpFieldNumber = 10,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Protocol.LocationYaw locationYaw = 3;
  bool has_locationyaw() const;
  private:
  bool _internal_has_locationyaw() const;
  public:
  void clear_locationyaw();
  const ::Protocol::LocationYaw& locationyaw() const;
  PROTOBUF_NODISCARD ::Protocol::LocationYaw* release_locationyaw();
  ::Protocol::LocationYaw* mutable_locationyaw();
  void set_allocated_locationyaw(::Protocol::LocationYaw* locationyaw);
  private:
  const ::Protocol::LocationYaw& _internal_locationyaw() const;
  ::Protocol::LocationYaw* _internal_mutable_locationyaw();
  public:
  void unsafe_arena_set_allocated_locationyaw(
      ::Protocol::LocationYaw* locationyaw);
  ::Protocol::LocationYaw* unsafe_arena_release_locationyaw();

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // .Protocol.ObjectType objectType = 2;
  void clear_objecttype();
  ::Protocol::ObjectType objecttype() const;
  void set_objecttype(::Protocol::ObjectType value);
  private:
  ::Protocol::ObjectType _internal_objecttype() const;
  void _internal_set_objecttype(::Protocol::ObjectType value);
  public:

  // .Protocol.JobType jobType = 5;
  void clear_jobtype();
  ::Protocol::JobType jobtype() const;
  void set_jobtype(::Protocol::JobType value);
  private:
  ::Protocol::JobType _internal_jobtype() const;
  void _internal_set_jobtype(::Protocol::JobType value);
  public:

  // .Protocol.MonsterType monsterType = 6;
  void clear_monstertype();
  ::Protocol::MonsterType monstertype() const;
  void set_monstertype(::Protocol::MonsterType value);
  private:
  ::Protocol::MonsterType _internal_monstertype() const;
  void _internal_set_monstertype(::Protocol::MonsterType value);
  public:

  // uint32 level = 7;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 mapCmsId = 8;
  void clear_mapcmsid();
  uint32_t mapcmsid() const;
  void set_mapcmsid(uint32_t value);
  private:
  uint32_t _internal_mapcmsid() const;
  void _internal_set_mapcmsid(uint32_t value);
  public:

  // uint32 hp = 9;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 exp = 10;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Protocol::LocationYaw* locationyaw_;
    uint64_t id_;
    int objecttype_;
    int jobtype_;
    int monstertype_;
    uint32_t level_;
    uint32_t mapcmsid_;
    uint32_t hp_;
    uint32_t exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class LobbyPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LobbyPlayerInfo) */ {
 public:
  inline LobbyPlayerInfo() : LobbyPlayerInfo(nullptr) {}
  ~LobbyPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR LobbyPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobbyPlayerInfo(const LobbyPlayerInfo& from);
  LobbyPlayerInfo(LobbyPlayerInfo&& from) noexcept
    : LobbyPlayerInfo() {
    *this = ::std::move(from);
  }

  inline LobbyPlayerInfo& operator=(const LobbyPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobbyPlayerInfo& operator=(LobbyPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobbyPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobbyPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const LobbyPlayerInfo*>(
               &_LobbyPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LobbyPlayerInfo& a, LobbyPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LobbyPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobbyPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobbyPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobbyPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobbyPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LobbyPlayerInfo& from) {
    LobbyPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobbyPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LobbyPlayerInfo";
  }
  protected:
  explicit LobbyPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kJobTypeFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 jobType = 3;
  void clear_jobtype();
  uint32_t jobtype() const;
  void set_jobtype(uint32_t value);
  private:
  uint32_t _internal_jobtype() const;
  void _internal_set_jobtype(uint32_t value);
  public:

  // uint32 level = 4;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LobbyPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t id_;
    uint32_t jobtype_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocationYaw

// uint64 id = 1;
inline void LocationYaw::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t LocationYaw::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t LocationYaw::id() const {
  // @@protoc_insertion_point(field_get:Protocol.LocationYaw.id)
  return _internal_id();
}
inline void LocationYaw::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void LocationYaw::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.LocationYaw.id)
}

// float x = 2;
inline void LocationYaw::clear_x() {
  _impl_.x_ = 0;
}
inline float LocationYaw::_internal_x() const {
  return _impl_.x_;
}
inline float LocationYaw::x() const {
  // @@protoc_insertion_point(field_get:Protocol.LocationYaw.x)
  return _internal_x();
}
inline void LocationYaw::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void LocationYaw::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.LocationYaw.x)
}

// float y = 3;
inline void LocationYaw::clear_y() {
  _impl_.y_ = 0;
}
inline float LocationYaw::_internal_y() const {
  return _impl_.y_;
}
inline float LocationYaw::y() const {
  // @@protoc_insertion_point(field_get:Protocol.LocationYaw.y)
  return _internal_y();
}
inline void LocationYaw::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void LocationYaw::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.LocationYaw.y)
}

// float yaw = 5;
inline void LocationYaw::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float LocationYaw::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float LocationYaw::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.LocationYaw.yaw)
  return _internal_yaw();
}
inline void LocationYaw::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void LocationYaw::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.LocationYaw.yaw)
}

// .Protocol.MoveState moveState = 6;
inline void LocationYaw::clear_movestate() {
  _impl_.movestate_ = 0;
}
inline ::Protocol::MoveState LocationYaw::_internal_movestate() const {
  return static_cast< ::Protocol::MoveState >(_impl_.movestate_);
}
inline ::Protocol::MoveState LocationYaw::movestate() const {
  // @@protoc_insertion_point(field_get:Protocol.LocationYaw.moveState)
  return _internal_movestate();
}
inline void LocationYaw::_internal_set_movestate(::Protocol::MoveState value) {
  
  _impl_.movestate_ = value;
}
inline void LocationYaw::set_movestate(::Protocol::MoveState value) {
  _internal_set_movestate(value);
  // @@protoc_insertion_point(field_set:Protocol.LocationYaw.moveState)
}

// float duration = 7;
inline void LocationYaw::clear_duration() {
  _impl_.duration_ = 0;
}
inline float LocationYaw::_internal_duration() const {
  return _impl_.duration_;
}
inline float LocationYaw::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.LocationYaw.duration)
  return _internal_duration();
}
inline void LocationYaw::_internal_set_duration(float value) {
  
  _impl_.duration_ = value;
}
inline void LocationYaw::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.LocationYaw.duration)
}

// -------------------------------------------------------------------

// ObjectInfo

// uint64 id = 1;
inline void ObjectInfo::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t ObjectInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t ObjectInfo::id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.id)
  return _internal_id();
}
inline void ObjectInfo::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void ObjectInfo::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.id)
}

// .Protocol.ObjectType objectType = 2;
inline void ObjectInfo::clear_objecttype() {
  _impl_.objecttype_ = 0;
}
inline ::Protocol::ObjectType ObjectInfo::_internal_objecttype() const {
  return static_cast< ::Protocol::ObjectType >(_impl_.objecttype_);
}
inline ::Protocol::ObjectType ObjectInfo::objecttype() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.objectType)
  return _internal_objecttype();
}
inline void ObjectInfo::_internal_set_objecttype(::Protocol::ObjectType value) {
  
  _impl_.objecttype_ = value;
}
inline void ObjectInfo::set_objecttype(::Protocol::ObjectType value) {
  _internal_set_objecttype(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.objectType)
}

// .Protocol.LocationYaw locationYaw = 3;
inline bool ObjectInfo::_internal_has_locationyaw() const {
  return this != internal_default_instance() && _impl_.locationyaw_ != nullptr;
}
inline bool ObjectInfo::has_locationyaw() const {
  return _internal_has_locationyaw();
}
inline void ObjectInfo::clear_locationyaw() {
  if (GetArenaForAllocation() == nullptr && _impl_.locationyaw_ != nullptr) {
    delete _impl_.locationyaw_;
  }
  _impl_.locationyaw_ = nullptr;
}
inline const ::Protocol::LocationYaw& ObjectInfo::_internal_locationyaw() const {
  const ::Protocol::LocationYaw* p = _impl_.locationyaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::LocationYaw&>(
      ::Protocol::_LocationYaw_default_instance_);
}
inline const ::Protocol::LocationYaw& ObjectInfo::locationyaw() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.locationYaw)
  return _internal_locationyaw();
}
inline void ObjectInfo::unsafe_arena_set_allocated_locationyaw(
    ::Protocol::LocationYaw* locationyaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.locationyaw_);
  }
  _impl_.locationyaw_ = locationyaw;
  if (locationyaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.locationYaw)
}
inline ::Protocol::LocationYaw* ObjectInfo::release_locationyaw() {
  
  ::Protocol::LocationYaw* temp = _impl_.locationyaw_;
  _impl_.locationyaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::LocationYaw* ObjectInfo::unsafe_arena_release_locationyaw() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.locationYaw)
  
  ::Protocol::LocationYaw* temp = _impl_.locationyaw_;
  _impl_.locationyaw_ = nullptr;
  return temp;
}
inline ::Protocol::LocationYaw* ObjectInfo::_internal_mutable_locationyaw() {
  
  if (_impl_.locationyaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::LocationYaw>(GetArenaForAllocation());
    _impl_.locationyaw_ = p;
  }
  return _impl_.locationyaw_;
}
inline ::Protocol::LocationYaw* ObjectInfo::mutable_locationyaw() {
  ::Protocol::LocationYaw* _msg = _internal_mutable_locationyaw();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.locationYaw)
  return _msg;
}
inline void ObjectInfo::set_allocated_locationyaw(::Protocol::LocationYaw* locationyaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.locationyaw_;
  }
  if (locationyaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locationyaw);
    if (message_arena != submessage_arena) {
      locationyaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationyaw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.locationyaw_ = locationyaw;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.locationYaw)
}

// string name = 4;
inline void ObjectInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ObjectInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.name)
}
inline std::string* ObjectInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.name)
  return _s;
}
inline const std::string& ObjectInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ObjectInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.name)
  return _impl_.name_.Release();
}
inline void ObjectInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.name)
}

// .Protocol.JobType jobType = 5;
inline void ObjectInfo::clear_jobtype() {
  _impl_.jobtype_ = 0;
}
inline ::Protocol::JobType ObjectInfo::_internal_jobtype() const {
  return static_cast< ::Protocol::JobType >(_impl_.jobtype_);
}
inline ::Protocol::JobType ObjectInfo::jobtype() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.jobType)
  return _internal_jobtype();
}
inline void ObjectInfo::_internal_set_jobtype(::Protocol::JobType value) {
  
  _impl_.jobtype_ = value;
}
inline void ObjectInfo::set_jobtype(::Protocol::JobType value) {
  _internal_set_jobtype(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.jobType)
}

// .Protocol.MonsterType monsterType = 6;
inline void ObjectInfo::clear_monstertype() {
  _impl_.monstertype_ = 0;
}
inline ::Protocol::MonsterType ObjectInfo::_internal_monstertype() const {
  return static_cast< ::Protocol::MonsterType >(_impl_.monstertype_);
}
inline ::Protocol::MonsterType ObjectInfo::monstertype() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.monsterType)
  return _internal_monstertype();
}
inline void ObjectInfo::_internal_set_monstertype(::Protocol::MonsterType value) {
  
  _impl_.monstertype_ = value;
}
inline void ObjectInfo::set_monstertype(::Protocol::MonsterType value) {
  _internal_set_monstertype(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.monsterType)
}

// uint32 level = 7;
inline void ObjectInfo::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t ObjectInfo::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t ObjectInfo::level() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.level)
  return _internal_level();
}
inline void ObjectInfo::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void ObjectInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.level)
}

// uint32 mapCmsId = 8;
inline void ObjectInfo::clear_mapcmsid() {
  _impl_.mapcmsid_ = 0u;
}
inline uint32_t ObjectInfo::_internal_mapcmsid() const {
  return _impl_.mapcmsid_;
}
inline uint32_t ObjectInfo::mapcmsid() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.mapCmsId)
  return _internal_mapcmsid();
}
inline void ObjectInfo::_internal_set_mapcmsid(uint32_t value) {
  
  _impl_.mapcmsid_ = value;
}
inline void ObjectInfo::set_mapcmsid(uint32_t value) {
  _internal_set_mapcmsid(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.mapCmsId)
}

// uint32 hp = 9;
inline void ObjectInfo::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t ObjectInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t ObjectInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.hp)
  return _internal_hp();
}
inline void ObjectInfo::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void ObjectInfo::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.hp)
}

// uint32 exp = 10;
inline void ObjectInfo::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t ObjectInfo::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t ObjectInfo::exp() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.exp)
  return _internal_exp();
}
inline void ObjectInfo::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void ObjectInfo::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.exp)
}

// -------------------------------------------------------------------

// LobbyPlayerInfo

// uint64 id = 1;
inline void LobbyPlayerInfo::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t LobbyPlayerInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t LobbyPlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:Protocol.LobbyPlayerInfo.id)
  return _internal_id();
}
inline void LobbyPlayerInfo::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void LobbyPlayerInfo::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.LobbyPlayerInfo.id)
}

// string name = 2;
inline void LobbyPlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LobbyPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.LobbyPlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbyPlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LobbyPlayerInfo.name)
}
inline std::string* LobbyPlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.LobbyPlayerInfo.name)
  return _s;
}
inline const std::string& LobbyPlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LobbyPlayerInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LobbyPlayerInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LobbyPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.LobbyPlayerInfo.name)
  return _impl_.name_.Release();
}
inline void LobbyPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.LobbyPlayerInfo.name)
}

// uint32 jobType = 3;
inline void LobbyPlayerInfo::clear_jobtype() {
  _impl_.jobtype_ = 0u;
}
inline uint32_t LobbyPlayerInfo::_internal_jobtype() const {
  return _impl_.jobtype_;
}
inline uint32_t LobbyPlayerInfo::jobtype() const {
  // @@protoc_insertion_point(field_get:Protocol.LobbyPlayerInfo.jobType)
  return _internal_jobtype();
}
inline void LobbyPlayerInfo::_internal_set_jobtype(uint32_t value) {
  
  _impl_.jobtype_ = value;
}
inline void LobbyPlayerInfo::set_jobtype(uint32_t value) {
  _internal_set_jobtype(value);
  // @@protoc_insertion_point(field_set:Protocol.LobbyPlayerInfo.jobType)
}

// uint32 level = 4;
inline void LobbyPlayerInfo::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t LobbyPlayerInfo::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t LobbyPlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:Protocol.LobbyPlayerInfo.level)
  return _internal_level();
}
inline void LobbyPlayerInfo::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void LobbyPlayerInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.LobbyPlayerInfo.level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
